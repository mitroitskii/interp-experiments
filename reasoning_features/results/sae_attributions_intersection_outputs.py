# %%
# base

l7_top_50_descending = [14176, 9345, 23195, 5365, 31365, 24295, 11688, 23275, 7068, 18579, 1054, 20603, 8220, 14416, 5058, 14747, 6520, 6087, 32391, 25205, 13666, 11181, 22479,
                        27971, 13949, 11462, 15224, 12209, 1454, 14008, 23809, 9594, 6459, 19120, 16943, 32629, 2700, 9463, 6202, 18214, 17523, 572, 23, 6585, 25867, 16765, 21546, 6468, 11286, 30893]

l7_bottom_50_ascending = [10583, 8304, 21771, 26608, 14648, 25450, 79, 8251, 7784, 17593, 21155, 4698, 21907, 12915, 2971, 23221, 3858, 26349, 9468, 6359, 4504, 24609, 16352,
                          30938, 4675, 15537, 17208, 20050, 12547, 3150, 19594, 3555, 20273, 14700, 20177, 13373, 17606, 9355, 7962, 15015, 27207, 30189, 2582, 23458, 27001, 5292, 18403, 7129, 24466, 2364]

l15_top_50_descending = [10059, 11459, 21002, 23759, 9523, 31239, 10005, 15811, 21444, 22152, 14599, 18287, 19297, 31730, 28588, 2103, 23544, 5714, 27226, 18604, 28587, 23114, 28008,
                         14478, 28652, 5321, 28839, 18531, 9550, 5032, 26583, 10969, 16538, 9007, 3599, 20621, 1780, 6185, 16034, 15331, 31779, 7418, 26163, 31718, 10578, 5641, 6842, 13087, 19085, 22704]

l15_bottom_50_ascending = [16267, 25488, 9496, 20728, 15686, 29936, 4138, 18691, 4068, 6373, 16155, 18994, 24539, 23116, 6728, 6274, 31163, 7785, 18995, 5252, 15318, 7078, 5277, 24178,
                           5182, 31382, 21835, 22697, 26760, 17357, 30262, 31174, 30096, 22180, 6179, 18508, 21162, 23481, 8491, 16090, 23316, 18900, 6222, 23720, 4878, 30893, 10897, 19814, 25314, 20418]


l23_top_50_descending = [21963, 22054, 5918, 30186, 17357, 29428, 23441, 22012, 17456, 16565, 12326, 518, 4606, 31463, 19952, 10971, 13300, 17539, 11424, 113, 493, 20237, 27548,
                         14266, 2208, 20233, 8857, 14537, 13532, 12063, 25355, 24413, 13594, 20367, 23565, 2148, 10032, 18679, 11090, 29473, 24633, 8576, 65, 32247, 30028, 18572, 15053, 4269, 24463, 14558]

l23_bottom_50_ascending = [445, 8355, 32365, 18477, 15272, 24779, 21738, 25914, 32182, 28737, 32144, 4457, 16692, 4551, 28548, 8182, 15834, 13487, 4316, 14468, 32532, 13505, 26587,
                           6614, 7430, 28859, 24320, 4393, 27112, 5160, 14164, 29359, 21457, 14335, 1689, 27258, 28190, 12354, 7343, 28905, 24756, 21279, 13059, 9428, 4700, 7047, 5662, 15684, 28150, 31417]

# zero

l7_top_50_descending_zero = [1054, 14176, 2098, 9345, 9487, 14416, 31365, 15224, 23195, 20603, 5365, 28259, 14747, 9463, 24295, 23275, 18579, 32629, 32391, 6520, 11286, 8220, 5058,
                             10236, 6087, 13666, 27971, 25205, 21604, 12209, 11181, 22479, 13949, 6459, 1454, 11462, 8286, 23809, 16943, 19120, 17523, 18214, 2700, 6585, 6202, 572, 14746, 30893, 32006, 27931]

l7_bottom_50_ascending_zero = [31422, 7784, 26608, 12915, 14648, 8251, 17593, 4698, 3858, 23221, 21907, 9859, 23393, 2971, 10280, 22251, 16352, 20177, 4504, 30938, 15537, 6218, 20050,
                               24827, 27207, 12547, 3150, 28517, 20273, 2364, 23458, 20356, 30189, 15015, 2582, 14700, 17606, 15328, 7962, 9355, 27001, 9987, 5292, 28186, 10952, 24466, 10850, 14685, 5351, 29658]

l15_top_50_descending_zero = [16267, 17587, 10059, 10005, 21002, 2103, 19193, 11459, 23759, 9523, 16155, 15811, 5714, 31239, 21444, 22152, 18287, 18604, 20729, 31730, 14599, 19297,
                              28588, 23544, 14478, 23114, 28008, 28587, 6357, 7603, 28652, 5277, 6834, 28839, 9007, 9550, 5032, 27800, 28055, 6185, 26583, 1384, 24070, 10969, 19085, 13787, 20621, 31779, 16538, 3599]

l15_bottom_50_ascending_zero = [20728, 9496, 25488, 29936, 15686, 4068, 18691, 30262, 23116, 21835, 32146, 7785, 18995, 7300, 18531, 7078, 5182, 26760, 15318, 22697, 31382, 10578, 1920,
                                17357, 6179, 23481, 22180, 21162, 20318, 18900, 16090, 23316, 8491, 21704, 10897, 663, 24731, 19814, 917, 30893, 1240, 15205, 30659, 25060, 26017, 11742, 22662, 25640, 16392, 22449]


l23_top_50_descending_zero = [25914, 16565, 9132, 21963, 22054, 5918, 17357, 30186, 32365, 22012, 20233, 29428, 445, 17539, 10971, 17456, 13300, 12326, 27548, 19952, 29536, 113, 2208,
                              15272, 14266, 493, 3698, 8857, 12063, 7343, 18477, 4700, 29352, 14558, 8355, 11090, 23565, 20367, 18679, 23794, 24730, 10032, 7847, 31362, 29473, 4212, 20915, 30028, 24756, 24463]

l23_bottom_50_ascending_zero = [21738, 15834, 6614, 518, 4551, 28548, 27112, 13487, 4316, 13505, 141, 24320, 27258, 29359, 14335, 17057, 870, 21059, 32247, 17569, 17230, 14880, 2629,
                                21161, 2353, 15403, 7556, 13117, 11471, 28852, 28661, 12076, 9727, 3486, 16849, 24538, 5754, 28957, 28178, 23441, 240, 30474, 25568, 19408, 27314, 20322, 5710, 20867, 32515, 2605]


def compare_lists(list1_name, list1, list2_name, list2):
    set1 = set(list1)
    set2 = set(list2)

    intersection = sorted(list(set1.intersection(set2)))
    unique_to_list1 = sorted(list(set1.difference(set2)))
    unique_to_list2 = sorted(list(set2.difference(set1)))

    # Check unique elements against the top 10 of their *own* list
    unique1_in_top10_of_list1 = {}
    for elem in unique_to_list1:
        try:
            # Check only within the first 10 elements of list1
            index = list1[:10].index(elem)
            unique1_in_top10_of_list1[elem] = index + 1  # 1-based index
        except ValueError:
            pass  # Element not found in the top 10 of list1

    unique2_in_top10_of_list2 = {}
    for elem in unique_to_list2:
        try:
            # Check only within the first 10 elements of list2
            index = list2[:10].index(elem)
            unique2_in_top10_of_list2[elem] = index + 1  # 1-based index
        except ValueError:
            pass  # Element not found in the top 10 of list2

    print(f"--- Comparison: {list1_name} vs {list2_name} ---")
    print(f"Intersection ({len(intersection)}): {intersection}")
    print(
        f"Unique to {list1_name} ({len(unique_to_list1)}): {unique_to_list1}")
    if unique1_in_top10_of_list1:
        print(
            f"  >> Unique elements also in top 10 of {list1_name} (element: 1-based position): {unique1_in_top10_of_list1}")
    print(
        f"Unique to {list2_name} ({len(unique_to_list2)}): {unique_to_list2}")
    if unique2_in_top10_of_list2:
        print(
            f"  >> Unique elements also in top 10 of {list2_name} (element: 1-based position): {unique2_in_top10_of_list2}")
    print(
        "-" * (len(f"--- Comparison: {list1_name} vs {list2_name} ---")) + "\n")


# Layer 7 Comparisons
compare_lists("l7_top_50_descending", l7_top_50_descending,
              "l7_top_50_descending_zero", l7_top_50_descending_zero)
compare_lists("l7_bottom_50_ascending", l7_bottom_50_ascending,
              "l7_bottom_50_ascending_zero", l7_bottom_50_ascending_zero)

# Layer 15 Comparisons
compare_lists("l15_top_50_descending", l15_top_50_descending,
              "l15_top_50_descending_zero", l15_top_50_descending_zero)
compare_lists("l15_bottom_50_ascending", l15_bottom_50_ascending,
              "l15_bottom_50_ascending_zero", l15_bottom_50_ascending_zero)

# Layer 23 Comparisons
compare_lists("l23_top_50_descending", l23_top_50_descending,
              "l23_top_50_descending_zero", l23_top_50_descending_zero)
compare_lists("l23_bottom_50_ascending", l23_bottom_50_ascending,
              "l23_bottom_50_ascending_zero", l23_bottom_50_ascending_zero)

# %%
