# %%
# base

l7_top_50_descending = [9345, 5365, 14176, 31365, 6720, 32629, 19880, 9384, 20414, 25205, 32391, 30768, 31422, 9463, 15224, 23809, 28259, 24295, 6520, 27971, 13666, 23, 11422, 8488,
                        14416, 30893, 1599, 23451, 26876, 23195, 29066, 5058, 24643, 20603, 17523, 23275, 24624, 1765, 17567, 13913, 16237, 15685, 25517, 22479, 18214, 11286, 22890, 4504, 53, 11109]

l7_bottom_50_ascending = [21771, 3150, 4675, 18403, 13836, 14648, 9943, 8251, 9859, 8304, 5351, 25793, 12547, 21478, 22209, 32328, 4813, 21939, 28997, 24766, 14713, 20273, 16296,
                          4698, 16943, 23773, 14700, 26608, 27001, 31758, 6359, 3680, 5572, 1530, 10280, 3699, 12258, 24475, 21907, 30727, 13753, 13893, 1256, 8759, 17015, 5484, 25450, 28678, 934, 15237]

l15_top_50_descending = [21002, 15811, 10059, 2103, 23759, 11459, 21444, 28588, 5714, 23544, 22152, 26319, 9523, 31239, 14599, 6185, 20621, 31730, 9550, 3599, 6357, 7300, 22091,
                         5321, 17410, 14478, 10969, 18287, 13087, 21689, 28839, 13787, 19297, 7716, 28858, 9861, 18604, 431, 14452, 28652, 16034, 7777, 16359, 6842, 2458, 31779, 18831, 5675, 24070, 32017]

l15_bottom_50_ascending = [16267, 17587, 9496, 25488, 15686, 4138, 6373, 5252, 18691, 17357, 19690, 20728, 24539, 11937, 31163, 6728, 21835, 29936, 26760, 20729, 3527, 27553, 4068,
                           18994, 16392, 26817, 1616, 6834, 24178, 22697, 18900, 6222, 12082, 2520, 31382, 4878, 31784, 10897, 30262, 18995, 24731, 27479, 15318, 132, 5277, 32699, 9980, 5182, 31174, 20844]

l23_top_50_descending = [5918, 21963, 17456, 22054, 10971, 32720, 17539, 2208, 30186, 17843, 21919, 24413, 11090, 22012, 29536, 5364, 17357, 32198, 13300, 31916, 23565, 14266, 12326,
                         20237, 12063, 2965, 24633, 18679, 32247, 11868, 518, 18572, 27858, 282, 5964, 10102, 25322, 4606, 8576, 21334, 2615, 10898, 12755, 29428, 1004, 6512, 27314, 5295, 23794, 13692]

l23_bottom_50_ascending = [445, 8355, 32365, 24779, 25914, 15272, 18477, 21738, 18151, 29359, 8182, 4551, 32144, 4316, 16584, 28737, 12354, 9132, 15834, 32532, 28957, 25246, 14558,
                           28548, 2876, 4700, 24811, 13487, 28859, 21305, 13594, 16506, 5160, 19688, 25338, 32182, 2605, 5897, 13059, 28905, 7430, 16692, 15403, 11432, 9873, 7215, 14837, 24009, 3617, 17230]

# zero

l7_top_50_descending_zero = [1054, 31365, 9345, 2098, 14176, 5365, 14416, 9463, 15224, 20414, 28259, 21771, 19880, 32629, 6720, 30768, 9384, 32391, 25205, 23809, 11352, 27971, 30878,
                             10352, 24295, 6520, 13666, 20603, 11422, 23451, 1599, 17523, 8488, 29066, 30893, 10236, 26876, 24643, 5058, 10583, 23275, 25517, 24624, 8056, 13913, 11286, 17567, 1475, 16237, 15685]

l7_bottom_50_ascending_zero = [31422, 9859, 8304, 7784, 9487, 3150, 12915, 17394, 13836, 14648, 26608, 18403, 8251, 5351, 25793, 12547, 10850, 21478, 22209, 32328, 4813, 21939, 28997,
                               23063, 24766, 14713, 20273, 27098, 18585, 16943, 4698, 23393, 23773, 22251, 14700, 10280, 31758, 27001, 3680, 5572, 1530, 3699, 12258, 24475, 30727, 21907, 5484, 13893, 8759, 1256]

l15_top_50_descending_zero = [17587, 16267, 2103, 19193, 21002, 15811, 10005, 10059, 16155, 23759, 11459, 21444, 28588, 5714, 16468, 25506, 9523, 23544, 22152, 31239, 14599, 6185, 13787,
                              31730, 20621, 6357, 18287, 22400, 9550, 3599, 22091, 18604, 10969, 17410, 14478, 20456, 13087, 28788, 21689, 19297, 5252, 28839, 23114, 11346, 9137, 28818, 28858, 7716, 31779, 9861]

l15_bottom_50_ascending_zero = [9496, 25488, 20728, 15686, 29936, 18691, 17357, 26817, 26760, 21835, 18531, 3527, 4068, 16392, 1616, 10897, 22697, 18900, 30262, 31382, 18995, 15318,
                                24731, 32146, 6129, 9980, 5182, 20844, 7078, 24080, 15390, 10578, 1446, 663, 26945, 8491, 9880, 3192, 4481, 4190, 16090, 5760, 25060, 6179, 1407, 4635, 25640, 11925, 21162, 25272]

l23_top_50_descending_zero = [25914, 9132, 5918, 16565, 21963, 17456, 10971, 22054, 22012, 29536, 17357, 17539, 2208, 30186, 13300, 445, 4700, 11090, 14558, 15272, 28859, 19952, 5364,
                              29352, 5964, 23565, 20915, 3698, 14266, 1004, 3617, 12063, 20233, 224, 12326, 18679, 12755, 30298, 11868, 21279, 23794, 27858, 8355, 10102, 25322, 21334, 10898, 29428, 24730, 8167]

l23_bottom_50_ascending_zero = [21738, 29359, 4551, 4316, 15834, 6614, 518, 28957, 28548, 21919, 13487, 2605, 32720, 15403, 24009, 17230, 25926, 86, 16657, 20867, 14880, 13128, 27258,
                                32515, 16849, 2353, 23859, 13505, 5691, 17410, 29357, 240, 141, 24320, 17569, 27112, 14335, 11898, 32247, 8995, 28725, 344, 9379, 17235, 11224, 23441, 4877, 28661, 24657, 32489]


def compare_lists(list1_name, list1, list2_name, list2):
    set1 = set(list1)
    set2 = set(list2)

    intersection = sorted(list(set1.intersection(set2)))
    unique_to_list1 = sorted(list(set1.difference(set2)))
    unique_to_list2 = sorted(list(set2.difference(set1)))

    # Check unique elements against the top 10 of their *own* list
    unique1_in_top10_of_list1 = {}
    for elem in unique_to_list1:
        try:
            # Check only within the first 10 elements of list1
            index = list1[:10].index(elem)
            unique1_in_top10_of_list1[elem] = index + 1  # 1-based index
        except ValueError:
            pass  # Element not found in the top 10 of list1

    unique2_in_top10_of_list2 = {}
    for elem in unique_to_list2:
        try:
            # Check only within the first 10 elements of list2
            index = list2[:10].index(elem)
            unique2_in_top10_of_list2[elem] = index + 1  # 1-based index
        except ValueError:
            pass  # Element not found in the top 10 of list2

    print(f"--- Comparison: {list1_name} vs {list2_name} ---")
    print(f"Intersection ({len(intersection)}): {intersection}")
    print(
        f"Unique to {list1_name} ({len(unique_to_list1)}): {unique_to_list1}")
    if unique1_in_top10_of_list1:
        print(
            f"  >> Unique elements also in top 10 of {list1_name} (element: 1-based position): {unique1_in_top10_of_list1}")
    print(
        f"Unique to {list2_name} ({len(unique_to_list2)}): {unique_to_list2}")
    if unique2_in_top10_of_list2:
        print(
            f"  >> Unique elements also in top 10 of {list2_name} (element: 1-based position): {unique2_in_top10_of_list2}")
    print(
        "-" * (len(f"--- Comparison: {list1_name} vs {list2_name} ---")) + "\n")


# Layer 7 Comparisons
compare_lists("l7_top_50_descending", l7_top_50_descending,
              "l7_top_50_descending_zero", l7_top_50_descending_zero)
compare_lists("l7_bottom_50_ascending", l7_bottom_50_ascending,
              "l7_bottom_50_ascending_zero", l7_bottom_50_ascending_zero)

# Layer 15 Comparisons
compare_lists("l15_top_50_descending", l15_top_50_descending,
              "l15_top_50_descending_zero", l15_top_50_descending_zero)
compare_lists("l15_bottom_50_ascending", l15_bottom_50_ascending,
              "l15_bottom_50_ascending_zero", l15_bottom_50_ascending_zero)

# Layer 23 Comparisons
compare_lists("l23_top_50_descending", l23_top_50_descending,
              "l23_top_50_descending_zero", l23_top_50_descending_zero)
compare_lists("l23_bottom_50_ascending", l23_bottom_50_ascending,
              "l23_bottom_50_ascending_zero", l23_bottom_50_ascending_zero)

# %%
